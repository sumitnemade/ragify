# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be added to the global gitignore or merged into this project gitignore.  For a PyCharm
#  project, uncomment the following line:
.idea/

# VS Code
.vscode/

# Ragify specific - Database files
*.db
*.sqlite
*.sqlite3
test.db

# Ragify specific - Log files
*.log
logs/

# Ragify specific - Temporary and cache directories
temp/
tmp/
cache/
vector_db/
chroma_db/
faiss_index/
test_documents/
test_database.db
mixed_test_db.db
mixed_test_docs/
perf_tuning_docs/
perf_test_*/

# Ragify specific - Test artifacts
test_*.py
*_test.py
debug_*.py
quick_test.py
simple_test.py
minimal_test.py

# Ragify specific - Performance and monitoring files
ragify_performance.log
optimal_ragify_config.json
PERFORMANCE_OPTIMIZATION_README.md
PERFORMANCE_OPTIMIZATION_SUMMARY.md

# Ragify specific - Generated database files in examples
examples/*.db
examples/demo_database.db
examples/performance_demo.db

# Ragify specific - Build artifacts
src/*.egg-info/
src/ragify.egg-info/

# Ragify specific - Benchmark results
.benchmarks/

# Ragify specific - Coverage reports
.coverage
htmlcov/

# Ragify specific - Pytest cache
.pytest_cache/

# Ragify specific - Python cache
__pycache__/
*.pyc
*.pyo
*.pyd
.Python

# Ragify specific - Python virtual environments
venv/
env/
ENV/
env.bak/
venv.bak/
.venv/
.env/

# Ragify specific - Python packaging
*.egg-info/
*.egg
build/
dist/

# Ragify specific - Test database files
test.db

# Ragify specific - Additional patterns
*.pid
*.seed
*.pid.lock
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# OS specific
.DS_Store
Thumbs.db
*.swp
*.swo
*~

# Editor backup files
*~
*.bak
*.tmp
*.temp

# Cursor IDE
.cursor/

# Production Readiness Planning - Internal roadmap (not for commit)
PRODUCTION_READINESS_ROADMAP.md
